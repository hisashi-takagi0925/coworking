@startuml

' *** 認証フロー ***
title 認証のみ
actor ユーザー
participant フロント
participant Auth0
participant DB

ユーザー -> フロント: ログイン情報を入力
フロント -> Auth0: 認証リクエスト（ユーザー名・パスワード）
Auth0 -> DB: ユーザー情報を照合
DB --> Auth0: 照合結果（成功/失敗）
Auth0 -> フロント: アクセストークン発行
フロント -> ユーザー: ログイン成功通知 + トークンを保持

== 保護リソースへのアクセス ==
title 保護リソースへのアクセス
actor ユーザー
participant フロント
participant Auth0
participant バックエンド
participant DB

ユーザー -> フロント: 保護リソースにアクセスリクエスト
フロント -> Auth0: アクセストークンを送信
Auth0 -> DB: トークンを検証（有効期限、権限）
DB --> Auth0: 検証結果（成功/失敗）
Auth0 -> フロント: 検証結果を通知
フロント -> バックエンド: 保護リソースリクエスト（検証済みトークン）
バックエンド -> DB: 必要データを取得
DB --> バックエンド: データ返却
バックエンド -> フロント: 保護リソースのデータ
フロント -> ユーザー: 保護リソース表示

== シングルサインオン（SSO） ==
title シングルサインオン（SSO）
actor ユーザー
participant フロント1
participant フロント2
participant Auth0
participant DB

ユーザー -> フロント1: サービス1へのログインリクエスト
フロント1 -> Auth0: 認証リクエスト
Auth0 -> DB: ユーザー情報を照合
DB --> Auth0: 照合結果（成功）
Auth0 -> フロント1: アクセストークン発行
フロント1 -> ユーザー: サービス1へログイン成功

ユーザー -> フロント2: サービス2にアクセス
フロント2 -> Auth0: アクセストークンを確認
Auth0 -> フロント2: トークン検証成功
フロント2 -> ユーザー: サービス2へログイン成功

== 多要素認証（MFA） ==
title 多要素認証（MFA）
actor ユーザー
participant フロント
participant Auth0
participant DB

ユーザー -> フロント: ログイン情報を入力
フロント -> Auth0: 認証リクエスト（ユーザー名・パスワード）
Auth0 -> DB: ユーザー情報を照合
DB --> Auth0: 照合結果（成功）
Auth0 -> ユーザー: 追加認証リクエスト（例: SMSコード）
ユーザー -> Auth0: MFAコードを送信
Auth0 -> DB: MFAコードを検証
DB --> Auth0: 検証結果（成功/失敗）
Auth0 -> フロント: アクセストークン発行
フロント -> ユーザー: ログイン成功通知 + トークンを保持

== アクセストークン期限切れ ==
title アクセストークン期限切れ
actor ユーザー
participant フロント
participant Auth0
participant バックエンド
participant DB

ユーザー -> フロント: 保護リソースにアクセスリクエスト
フロント -> Auth0: アクセストークンを送信
Auth0 -> フロント: アクセストークンが期限切れエラー

フロント -> Auth0: リフレッシュトークンを使用して新しいアクセストークンをリクエスト
Auth0 -> DB: リフレッシュトークンを検証
DB --> Auth0: 検証結果（成功）
Auth0 -> フロント: 新しいアクセストークンを発行

フロント -> Auth0: 新しいアクセストークンで保護リソースに再リクエスト
Auth0 -> バックエンド: アクセス権を確認
バックエンド -> Auth0: アクセス許可
Auth0 -> フロント: 保護リソースのデータ
フロント -> ユーザー: 保護リソース表示

== リフレッシュトークン期限切れ ==
title リフレッシュトークン期限切れ
actor ユーザー
participant フロント
participant Auth0
participant DB

ユーザー -> フロント: 保護リソースにアクセスリクエスト
フロント -> Auth0: アクセストークンを送信
Auth0 -> フロント: アクセストークンが期限切れエラー

フロント -> Auth0: リフレッシュトークンを使用して新しいアクセストークンをリクエスト
Auth0 -> DB: リフレッシュトークンを検証
DB --> Auth0: 検証結果（期限切れエラー）

Auth0 -> フロント: 認証再要求エラー
フロント -> ユーザー: 再ログインを要求
ユーザー -> フロント: ログイン情報を入力
フロント -> Auth0: 新しい認証リクエスト
Auth0 -> DB: ユーザー情報を照合
DB --> Auth0: 照合結果（成功）
Auth0 -> フロント: 新しいアクセストークンとリフレッシュトークンを発行
フロント -> ユーザー: 再ログイン成功通知 + トークンを保持

@enduml
